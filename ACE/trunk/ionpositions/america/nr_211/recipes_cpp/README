                     Numerical Recipes - UNIX/Linux release

FILES:

	This the main directory of a distribution of Numerical Recipes
C++ software.

recipes_cpp
	Main directory containing recipe files for the C++ language
recipes_cpp/doc
	Numerical Recipes documentation.
recipes_cpp/recipes
	Source for all the routines in "Numerical Recipes" for C++.
recipes_cpp/demo
	Subdirectory containing demonstration files for a particular language.
recipes_cpp/demo/answers
	The "correct" results for comparison with the test output.
recipes_cpp/demo/data
	Data files required to run some of the examples.
recipes_cpp/demo/responses
	The responses to run the examples non-interactively.
recipes_cpp/demo/src
	Source for some example programs.
recipes_cpp/utils
        All the required .h files. Also the nrdiff.pl utility.
recipes_cpp/misc
        Perl program for changing to single precision.


INSTALLATION:

	Edit the makefile to set the NRROOT variable to the proper
(Depending on your Unix flavor, "gmake", the GNU make, might work better.)
directory. This is the full path name to the recipes_cpp directory.

	Copy the makefile to a clean test directory, then type "make".
This should compile all the object files, and then create some "results"
files from various tests.

Users of sh:   make > make.log 2>&1 &
Users of csh:  make >& make.log &

On most systems, you can check the progress of the make by running
tail -f make.log

	Note that when compiling, error information on the process itself
is saved in the log file which collects the output of the "make". This
information ordinarily does NOT go into the "results" files. Often the
messages are just benign warning or suggestions from the compiler, but
it's worth going through the output to check for a serious or
significant problem.

	Many of the demos are interactive, but the test process uses a
file of responses, contained in the responses subdirectory. In some
cases, a demo program may become blocked because it requires input but
none is provided from the response file. This happens when an unexpected
execution path is taken, usually due to a difference in machine
precision. Try compiling the demo program and running it in the
foreground with no I/O redirections. You may have to check over the
source for the demo program and for the routine it demonstrates in order
to find the cause.

	After the results files are created, you can check them against
the intended answers. It's easy to do this if you make a subdirectory
"results", and

	mv *.reslt results

	It may be possible to just run diff(1) on the two directories:

        diff [-s]  results <path>/recipes_cpp/demo/answers > diff.log

	However, your C++ may format some answers differently than
ours, such as 0.0 verses 0.0000. This, plus differences due to rounding,
may cause the results from diff(1) to be less helpful. If you have the
PERL language on your system, you may find the "nrdiff.pl"
approximate-comparison program (in the demo subdirectory) useful.

	The command  make clean  will remove all the residue .o files. 
It may be a good idea to delay this until after testing.

	If you want to put the object files into a library file, "make lib"
will do so.
