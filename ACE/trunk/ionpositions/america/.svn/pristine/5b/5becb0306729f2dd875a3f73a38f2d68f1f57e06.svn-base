/*
 * FILE : libhef_wrap.c
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Build 883)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* $Header: /cvsroot/SWIG1.1/swig_lib/perl5/headers.swg,v 1.1.1.1 1999/02/28 02:00:54 beazley Exp $ */
/* Implementation : PERL 5 */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny
   games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#include <string.h>
#ifdef __cplusplus
}
#endif
/* Definitions for compiling Perl extensions on a variety of machines */

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a) __declspec(dllexport) a
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a) a _export 
#	else
#	    define SWIGEXPORT(a) a 
#	endif
#   endif
#else
#   define SWIGEXPORT(a) a 
#endif

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
#define MAGIC_CAST   (int (CPerlObj::*)(SV *, MAGIC *))
#define SWIGCLASS_STATIC 
#else
#define MAGIC_PPERL
#define MAGIC_CAST
#define SWIGCLASS_STATIC static
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#ifndef PL_sv_yes
#define PL_sv_yes sv_yes
#endif
#ifndef PL_sv_undef
#define PL_sv_undef sv_undef
#endif
#ifndef PL_na
#define PL_na na
#endif
#endif

/******************************************************************************
 * Pointer type-checking code
 *****************************************************************************/

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIG_NOINCLUDE
extern void SWIG_MakePtr(char *, void *, char *);
#ifndef PERL_OBJECT
extern void SWIG_RegisterMapping(char *, char *, void *(*)(void *));
#else
#define SWIG_RegisterMapping(a,b,c) _SWIG_RegisterMapping(pPerl,a,b,c);
extern void _SWIG_RegisterMapping(CPerlObj *,char *, char *, void *(*)(void *),int);
#endif
#ifndef PERL_OBJECT
extern char *SWIG_GetPtr(SV *, void **, char *);
#else
extern char *_SWIG_GetPtr(CPerlObj *, SV *, void **, char *);
#define SWIG_GetPtr(a,b,c) _SWIG_GetPtr(pPerl,a,b,c)
#endif

#else

#ifdef SWIG_GLOBAL
#define SWIGSTATICRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGSTATICRUNTIME(a) static a
#endif

/* These are internal variables.   Should be static */

typedef struct SwigPtrType {
  char               *name;
  int                 len;
  void               *(*cast)(void *);
  struct SwigPtrType *next;
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */
static int SwigStart[256];             /* Table containing starting positions    */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

#ifndef PERL_OBJECT
SWIGSTATICRUNTIME(void) 
SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {
#else
#define SWIG_RegisterMapping(a,b,c) _SWIG_RegisterMapping(pPerl, a,b,c)
SWIGSTATICRUNTIME(void)
_SWIG_RegisterMapping(CPerlObj *pPerl, char *origtype, char *newtype, void *(*cast)(void *)) {
#endif

  int i;
  SwigPtrType *t = 0, *t1;

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc(SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }
  while (t->next) {
    if (strcmp(t->name,newtype) == 0) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;
  t->next = t1;
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATICRUNTIME(void) 
SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Function for getting a pointer value */

#ifndef PERL_OBJECT
SWIGSTATICRUNTIME(char *) 
SWIG_GetPtr(SV *sv, void **ptr, char *_t)
#else
#define SWIG_GetPtr(a,b,c) _SWIG_GetPtr(pPerl,a,b,c)
SWIGSTATICRUNTIME(char *)
_SWIG_GetPtr(CPerlObj *pPerl, SV *sv, void **ptr, char *_t)
#endif
{
  char temp_type[256];
  char *name,*_c;
  int  len,i,start,end;
  IV   tmp;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;

  /* If magical, apply more magic */

  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
	mg = mg_find(tsv,'P');
	if (mg) {
	  SV *rsv = mg->mg_obj;
	  if (sv_isobject(rsv)) {
	    tmp = SvIV((SV*)SvRV(rsv));
	  }
	}
      } else {
	return "Not a valid pointer value";
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    if (!_t) {
      *(ptr) = (void *) tmp;
      return (char *) 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return (char *) 0;
  } else if (SvTYPE(sv) == SVt_RV) {       /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv)) 
      return (char *) 0;
    else
      return "Not a valid pointer value";
  } else {                                 /* Don't know what it is */
      *(ptr) = (void *) 0;
      return "Not a valid pointer value";
  }
  if (_t) {
    /* Now see if the types match */      

    if (!sv_isa(sv,_t)) {
      _c = HvNAME(SvSTASH(SvRV(sv)));
      if (!SwigPtrSort) {
	qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort);  
	for (i = 0; i < 256; i++) {
	  SwigStart[i] = SwigPtrN;
	}
	for (i = SwigPtrN-1; i >= 0; i--) {
	  SwigStart[SwigPtrTable[i].name[0]] = i;
	}
	for (i = 255; i >= 1; i--) {
	  if (SwigStart[i-1] > SwigStart[i])
	    SwigStart[i-1] = SwigStart[i];
	}
	SwigPtrSort = 1;
	for (i = 0; i < SWIG_CACHESIZE; i++)  
	  SwigCache[i].stat = 0;
      }
      /* First check cache for matches.  Uses last cache value as starting point */
      cache = &SwigCache[SwigLastCache];
      for (i = 0; i < SWIG_CACHESIZE; i++) {
	if (cache->stat) {
	  if (strcmp(_t,cache->name) == 0) {
	    if (strcmp(_c,cache->mapped) == 0) {
	      cache->stat++;
	      *ptr = (void *) tmp;
	      if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
	      return (char *) 0;
	    }
	  }
	}
	SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	if (!SwigLastCache) cache = SwigCache;
	else cache++;
      }

      start = SwigStart[_t[0]];
      end = SwigStart[_t[0]+1];
      sp = &SwigPtrTable[start];
      while (start < end) {
	if (swigcmp(_t,sp) == 0) break;
	sp++;
	start++;
      }
      if (start > end) sp = 0;
      while (start <= end) {
	if (swigcmp(_t,sp) == 0) {
	  name = sp->name;
	  len = sp->len;
	  tp = sp->next;
	  while(tp) {
	    if (tp->len >= 255) {
	      return _c;
	    }
	    strcpy(temp_type,tp->name);
	    strncat(temp_type,_t+len,255-tp->len);
	    if (sv_isa(sv,temp_type)) {
	      /* Get pointer value */
	      *ptr = (void *) tmp;
	      if (tp->cast) *ptr = (*(tp->cast))(*ptr);

	      strcpy(SwigCache[SwigCacheIndex].mapped,_c);
	      strcpy(SwigCache[SwigCacheIndex].name,_t);
	      SwigCache[SwigCacheIndex].stat = 1;
	      SwigCache[SwigCacheIndex].tp = tp;
	      SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
	      return (char *) 0;
	    }
	    tp = tp->next;
	  } 
	}
	sp++;
	start++;
      }
      /* Didn't find any sort of match for this data.  
	 Get the pointer value and return the received type */
      *ptr = (void *) tmp;
      return _c;
    } else {
      /* Found a match on the first try.  Return pointer value */
      *ptr = (void *) tmp;
      return (char *) 0;
    }
  } 
  *ptr = (void *) tmp;
  return (char *) 0;
}

#endif
#ifdef __cplusplus
}
#endif






/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
#else
#define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = get;
  mg->mg_virtual->svt_set = set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}

#define SWIG_init    boot_libhef

#define SWIG_name   "libhef::boot_libhef"
#define SWIG_varinit "libhef::var_libhef_init();"
#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
SWIGEXPORT(void) boot_libhef(CV* cv);
#else
SWIGEXPORT(void) boot_libhef(CV *cv, CPerlObj *);
#endif

#include "decoded.h"
extern int a3opencyclefile(char *);
extern int a3closecyclefile();
extern int a3readcycle();
extern int a3expand();
extern double a3gtime();
extern char *a3zrecid();
extern char *a3hdffn();
extern char *a3ncfver();
extern BYTE a3gdpuhk(int ,int );
extern int a3cycx_nominal(int );
extern double a3gxeqdpu_i(int );
extern int a3gxeqtab_i(int );
extern double a3gxeqaux_i(int );
extern double a3gxpavdpu();
extern int a3xpavlev();
extern int a3xadc();
extern int a3xtrigcal();
extern int a3xtrigmode();
extern double *a3gcnq();
extern double *a3gcnm();
extern int a3gbrtab(int ,int );
extern int a3gmrtab(int ,int );
extern float a3gxhk(int ,int );
extern double a3gxfsr_i(int ,int );
extern double a3gxdcr_i(int ,int );
extern double a3gxtcr_i(int ,int );
extern double a3gxsdr_i(int ,int );
extern double a3gxpr_i(int ,int );
extern double a3gxar_i(int ,int );
extern double a3gxmr(int ,int ,int );
extern long a3gxbr(int ,int ,int );
extern double a3xbrwgt(int ,int );
extern int a3xnpha(int );
extern int a3gxnr(int ,int ,int );
extern double a3gxmoq_i(int ,int );
extern double a3gxmas_i(int ,int );
extern int a3gxtof_i(int ,int );
extern int a3gxesd_i(int ,int );
extern int a3gxdid_i(int ,int );
extern int a3gxsec_i(int ,int );
extern int a3gxrng_i(int ,int );
extern double a3cxmoq(double );
extern double a3cxmas(double );
extern int a3xellmmq(int ,double ,double ,double ,double ,double ,double );
extern double a3xrell(int ,int ,double ,long ,double ,double ,double ,double );
extern double a3xelletm(int ,int ,double ,long ,double ,double ,double ,double ,double ,double );
extern int a3mmq(double *,double *,double *,long ,double ,int ,double ,double ,int ,double ,double );
extern int a3eth(double *,long ,int ,double ,int ,int ,int ,int );
extern int a3qth(double *,long ,double ,int ,int ,int ,int );
extern double *a3xmrspd(int );
extern double *a3auxspd();
extern double a3xeoqsumv1(double ,double ,double ,double ,int ,int );
extern int a3cycm_nominal(int ,int ,int ,int );
extern int a3ccycm();
extern int a3ccycm_mcalev(int );
extern int a3ccycm_mcolev(int );
extern int a3ccycm_hyplev(int );
extern int a3ccycm_eqhk();
extern int a3ccycm_eqtabnom();
extern double a3gmeqdpu_i(int );
extern int a3mhyplev();
extern double a3mbrwgt(int ,int );
extern double a3gmfsr_i(int ,int );
extern double a3gmfsra_i(int ,int );
extern double a3gmfsrb_i(int ,int );
extern double a3gmfsrab_i(int ,int );
extern double a3gmrsr_i(int ,int );
extern double a3gmdcr_i(int ,int );
extern double a3gmmfsr_i(int ,int );
extern double a3gmmdcr_i(int ,int );
extern int a3mnpha(int );
extern int a3gmdid(int ,int );
extern int a3gmsec(int ,int );
extern int a3gmstamp(int ,int );
extern int a3gmstopk1(int ,int );
extern int a3gmstopk2(int ,int );
extern int a3gmtof(int ,int );
extern double a3cmtof(int );
extern int a3mcntpha(int ,int ,int ,int );
extern double *a3mtofhist(int ,int ,int ,int ,int );
extern long a3mtof1_i(int );
extern long a3mtof2_i(int );
extern BYTE a3gshk(int ,int );
extern float *a3gxeqtab();
extern float *a3gxeqdpu();
extern double *a3gxfsr();
extern double *a3gxdcr();
extern double *a3gxtcr();
extern double *a3gxsdr();
extern double *a3gxpr();
extern double *a3gxar();
extern float *a3gmeqtab();
extern int a3gmeqtab_i(int );
extern float *a3gmeqdpu();
extern float *a3gxmoq(int );
extern float *a3gxmas(int );
extern double adputof(double ,double ,double );
extern double adpuesd(double ,double );
extern double adpumoq(double ,double ,double );
extern double adpumas(double ,double );
extern double adpueoq(int );
extern double *xfm(double ,double ,double ,double );
extern double xeffv1(double ,double );
extern double aget(double *,int );
extern void aset(double *,int ,double );
extern void aeset(double *,int ,int ,double );
extern double asum(double *,int ,int );
extern void aadd(double *,double *,int ,int );
extern double dmom1(double *,double *,int );
extern double dmomN(double *,double *,int ,double );
extern int I(int ,int ,int );
extern int I3(int ,int ,int ,int ,int );
extern double *dvec_get(long );
extern void dvec_free(double *);
extern char *libhefrev();
extern void sec70_time(long [14],long *);
extern void doy_time(long [14],long *,long *);
extern void date_time(long [14],long *,long *,long *);
extern char *timstr(long );
extern void ltcaldat(long *,long *,long *,long *);
extern void ltjulday(long *,long *,long *,long *);
extern int is_leap(int );
extern int perr_setlevel(int );
#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_libhef_var::
class _wrap_libhef_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

XS(_wrap_a3opencyclefile) {

    int  _result;
    char * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3opencyclefile(zfn);");
    if (! SvOK((SV*) ST(0))) { _arg0 = 0; }
    else { _arg0 = (char *) SvPV(ST(0),PL_na); }
    _result = (int )a3opencyclefile(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3closecyclefile) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3closecyclefile();");
    _result = (int )a3closecyclefile();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3readcycle) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3readcycle();");
    _result = (int )a3readcycle();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3expand) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3expand();");
    _result = (int )a3expand();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gtime) {

    double  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gtime();");
    _result = (double )a3gtime();
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3zrecid) {

    char * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3zrecid();");
    _result = (char *)a3zrecid();
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3hdffn) {

    char * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3hdffn();");
    _result = (char *)a3hdffn();
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ncfver) {

    char * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3ncfver();");
    _result = (char *)a3ncfver();
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gdpuhk) {

    BYTE * _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gdpuhk(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (BYTE *) malloc(sizeof(BYTE ));
    *(_result) = a3gdpuhk(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"BYTEPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3cycx_nominal) {

    int  _result;
    int  _arg0 = (int ) 0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 1)) 
        croak("Usage: a3cycx_nominal(itab);");
    if (items > 0) {
    _arg0 = (int )SvIV(ST(0));
    } 
    _result = (int )a3cycx_nominal(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxeqdpu_i) {

    double  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gxeqdpu_i(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (double )a3gxeqdpu_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxeqtab_i) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gxeqtab_i(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3gxeqtab_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxeqaux_i) {

    double  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gxeqaux_i(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (double )a3gxeqaux_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxpavdpu) {

    double  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxpavdpu();");
    _result = (double )a3gxpavdpu();
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xpavlev) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3xpavlev();");
    _result = (int )a3xpavlev();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xadc) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3xadc();");
    _result = (int )a3xadc();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xtrigcal) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3xtrigcal();");
    _result = (int )a3xtrigcal();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xtrigmode) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3xtrigmode();");
    _result = (int )a3xtrigmode();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gcnq) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gcnq();");
    _result = (double *)a3gcnq();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gcnm) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gcnm();");
    _result = (double *)a3gcnm();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gbrtab) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gbrtab(ibox,icorn);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gbrtab(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmrtab) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmrtab(ibox,icorn);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmrtab(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxhk) {

    float  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxhk(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (float )a3gxhk(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxfsr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gxfsr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gxfsr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxdcr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gxdcr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gxdcr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxtcr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gxtcr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gxtcr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxsdr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gxsdr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gxsdr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxpr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gxpr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gxpr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxar_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gxar_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gxar_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxmr) {

    double  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 3)) 
        croak("Usage: a3gxmr(imr,ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    _result = (double )a3gxmr(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxmr_i) {

    long  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 3)) 
        croak("Usage: a3gxmr_i(ie,imr,isec);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    _result = (long )a3gxmr_i(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxbr) {

    long  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 3)) 
        croak("Usage: a3gxbr(ie,ibr,isec);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    _result = (long )a3gxbr(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xbrwgt) {

    double  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3xbrwgt(ie,ibr);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (double )a3xbrwgt(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xnpha) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3xnpha(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3xnpha(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxnr) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 3)) 
        croak("Usage: a3gxnr(ie,ibr,isec);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    _result = (int )a3gxnr(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxmoq_i) {

    double  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxmoq_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (double )a3gxmoq_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxmas_i) {

    double  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxmas_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (double )a3gxmas_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxtof_i) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxtof_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gxtof_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxesd_i) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxesd_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gxesd_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxdid_i) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxdid_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gxdid_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxsec_i) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxsec_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gxsec_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxrng_i) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gxrng_i(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gxrng_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3cxmoq) {

    double  _result;
    double  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3cxmoq(dmoq_ch);");
    _arg0 = (double ) SvNV(ST(0));
    _result = (double )a3cxmoq(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3cxmas) {

    double  _result;
    double  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3cxmas(dmas_ch);");
    _arg0 = (double ) SvNV(ST(0));
    _result = (double )a3cxmas(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xellmmq) {

    int  _result;
    int  _arg0;
    double  _arg1;
    double  _arg2;
    double  _arg3;
    double  _arg4;
    double  _arg5;
    double  _arg6;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 7) || (items > 7)) 
        croak("Usage: a3xellmmq(ie,moq0,smq1,smq2,mas0,sma1,sma2);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _arg3 = (double ) SvNV(ST(3));
    _arg4 = (double ) SvNV(ST(4));
    _arg5 = (double ) SvNV(ST(5));
    _arg6 = (double ) SvNV(ST(6));
    _result = (int )a3xellmmq(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xrell) {

    double  _result;
    int  _arg0;
    int  _arg1;
    double  _arg2;
    long  _arg3;
    double  _arg4;
    double  _arg5;
    double  _arg6;
    double  _arg7;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 8) || (items > 8)) 
        croak("Usage: a3xrell(ie,ir,vH,lflag,moq0,bmoq,mas0,bmas);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _arg3 = (long )SvIV(ST(3));
    _arg4 = (double ) SvNV(ST(4));
    _arg5 = (double ) SvNV(ST(5));
    _arg6 = (double ) SvNV(ST(6));
    _arg7 = (double ) SvNV(ST(7));
    _result = (double )a3xrell(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xelletm) {

    double  _result;
    int  _arg0;
    int  _arg1;
    double  _arg2;
    long  _arg3;
    double  _arg4;
    double  _arg5;
    double  _arg6;
    double  _arg7;
    double  _arg8;
    double  _arg9;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 10) || (items > 10)) 
        croak("Usage: a3xelletm(ie,ir,vH,lflag,t0,st1,st2,e0,se1,se2);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _arg3 = (long )SvIV(ST(3));
    _arg4 = (double ) SvNV(ST(4));
    _arg5 = (double ) SvNV(ST(5));
    _arg6 = (double ) SvNV(ST(6));
    _arg7 = (double ) SvNV(ST(7));
    _arg8 = (double ) SvNV(ST(8));
    _arg9 = (double ) SvNV(ST(9));
    _result = (double )a3xelletm(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mmq) {

    int  _result;
    double * _arg0;
    double * _arg1;
    double * _arg2;
    long  _arg3;
    double  _arg4;
    int  _arg5;
    double  _arg6;
    double  _arg7;
    int  _arg8;
    double  _arg9;
    double  _arg10;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 11) || (items > 11)) 
        croak("Usage: a3mmq(adhst,adx,ady,lflag,vH,Nx,dxl,dxh,Ny,dyl,dyh);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of a3mmq. Expected doublePtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"doublePtr")) {
        croak("Type error in argument 2 of a3mmq. Expected doublePtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"doublePtr")) {
        croak("Type error in argument 3 of a3mmq. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg3 = (long )SvIV(ST(3));
    _arg4 = (double ) SvNV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (double ) SvNV(ST(6));
    _arg7 = (double ) SvNV(ST(7));
    _arg8 = (int )SvIV(ST(8));
    _arg9 = (double ) SvNV(ST(9));
    _arg10 = (double ) SvNV(ST(10));
    _result = (int )a3mmq(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9,_arg10);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3eth) {

    int  _result;
    double * _arg0;
    long  _arg1;
    int  _arg2;
    double  _arg3;
    int  _arg4;
    int  _arg5;
    int  _arg6;
    int  _arg7;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 8) || (items > 8)) 
        croak("Usage: a3eth(adhst,lflag,ie,vH,offx,Nx,offy,Ny);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of a3eth. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg1 = (long )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (double ) SvNV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (int )SvIV(ST(6));
    _arg7 = (int )SvIV(ST(7));
    _result = (int )a3eth(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3qth) {

    int  _result;
    double * _arg0;
    long  _arg1;
    double  _arg2;
    int  _arg3;
    int  _arg4;
    int  _arg5;
    int  _arg6;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 7) || (items > 7)) 
        croak("Usage: a3qth(adhst,lflag,vH,offx,Nx,offy,Ny);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of a3qth. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg1 = (long )SvIV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    _arg6 = (int )SvIV(ST(6));
    _result = (int )a3qth(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xmrspd) {

    double * _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3xmrspd(imr);");
    _arg0 = (int )SvIV(ST(0));
    _result = (double *)a3xmrspd(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3auxspd) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3auxspd();");
    _result = (double *)a3auxspd();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3xeoqsumv1) {

    double  _result;
    double  _arg0;
    double  _arg1;
    double  _arg2;
    double  _arg3;
    int  _arg4;
    int  _arg5;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 6) || (items > 6)) 
        croak("Usage: a3xeoqsumv1(v0,vth,mas,crg,ifrst,ilast);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _arg3 = (double ) SvNV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _arg5 = (int )SvIV(ST(5));
    _result = (double )a3xeoqsumv1(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3cycm_nominal) {

    int  _result;
    int  _arg0 = (int ) 155;
    int  _arg1 = (int ) 155;
    int  _arg2 = (int ) 177;
    int  _arg3 = (int ) 0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 4)) 
        croak("Usage: a3cycm_nominal(alev,olev,hlev,itab);");
    if (items > 0) {
    _arg0 = (int )SvIV(ST(0));
    } 
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    if (items > 2) {
    _arg2 = (int )SvIV(ST(2));
    } 
    if (items > 3) {
    _arg3 = (int )SvIV(ST(3));
    } 
    _result = (int )a3cycm_nominal(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ccycm) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3ccycm();");
    _result = (int )a3ccycm();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ccycm_mcalev) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3ccycm_mcalev(lev);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3ccycm_mcalev(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ccycm_mcolev) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3ccycm_mcolev(lev);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3ccycm_mcolev(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ccycm_hyplev) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3ccycm_hyplev(lev);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3ccycm_hyplev(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ccycm_eqhk) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3ccycm_eqhk();");
    _result = (int )a3ccycm_eqhk();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3ccycm_eqtabnom) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3ccycm_eqtabnom();");
    _result = (int )a3ccycm_eqtabnom();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmeqdpu_i) {

    double  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gmeqdpu_i(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (double )a3gmeqdpu_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mhyplev) {

    int  _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3mhyplev();");
    _result = (int )a3mhyplev();
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmhk) {

    float  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmhk(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (float )a3gmhk(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mbrwgt) {

    double  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3mbrwgt(ie,ibr);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (double )a3mbrwgt(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmfsr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmfsr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmfsr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmfsra_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmfsra_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmfsra_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmfsrb_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmfsrb_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmfsrb_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmfsrab_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmfsrab_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmfsrab_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmrsr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmrsr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmrsr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmdcr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmdcr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmdcr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmmfsr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmmfsr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmmfsr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmmdcr_i) {

    double  _result;
    int  _arg0;
    int  _arg1 = (int ) 8;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 2)) 
        croak("Usage: a3gmmdcr_i(ie,isec);");
    _arg0 = (int )SvIV(ST(0));
    if (items > 1) {
    _arg1 = (int )SvIV(ST(1));
    } 
    _result = (double )a3gmmdcr_i(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mnpha) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3mnpha(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3mnpha(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmdid) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmdid(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmdid(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmsec) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmsec(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmsec(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmstamp) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmstamp(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmstamp(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmstopk1) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmstopk1(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmstopk1(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmstopk2) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmstopk2(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmstopk2(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmtof) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gmtof(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (int )a3gmtof(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3cmtof) {

    double  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3cmtof(itof_ch);");
    _arg0 = (int )SvIV(ST(0));
    _result = (double )a3cmtof(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mcntpha) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: a3mcntpha(ie,tid,tlow,thig);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _result = (int )a3mcntpha(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mtofhist) {

    double * _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: a3mtofhist(iel,ieh,itl,ith,tid);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _result = (double *)a3mtofhist(_arg0,_arg1,_arg2,_arg3,_arg4);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mtof1_i) {

    long  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3mtof1_i(i);");
    _arg0 = (int )SvIV(ST(0));
    _result = (long )a3mtof1_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3mtof2_i) {

    long  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3mtof2_i(i);");
    _arg0 = (int )SvIV(ST(0));
    _result = (long )a3mtof2_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gshk) {

    BYTE * _result;
    int  _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: a3gshk(ie,i);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _result = (BYTE *) malloc(sizeof(BYTE ));
    *(_result) = a3gshk(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"BYTEPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxeqtab) {

    float * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxeqtab();");
    _result = (float *)a3gxeqtab();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"floatPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxeqdpu) {

    float * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxeqdpu();");
    _result = (float *)a3gxeqdpu();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"floatPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxfsr) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxfsr();");
    _result = (double *)a3gxfsr();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxdcr) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxdcr();");
    _result = (double *)a3gxdcr();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxtcr) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxtcr();");
    _result = (double *)a3gxtcr();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxsdr) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxsdr();");
    _result = (double *)a3gxsdr();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxpr) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxpr();");
    _result = (double *)a3gxpr();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxar) {

    double * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gxar();");
    _result = (double *)a3gxar();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmeqtab) {

    float * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gmeqtab();");
    _result = (float *)a3gmeqtab();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"floatPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmeqtab_i) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gmeqtab_i(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )a3gmeqtab_i(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gmeqdpu) {

    float * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: a3gmeqdpu();");
    _result = (float *)a3gmeqdpu();
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"floatPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxmoq) {

    float * _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gxmoq(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (float *)a3gxmoq(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"floatPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_a3gxmas) {

    float * _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: a3gxmas(ie);");
    _arg0 = (int )SvIV(ST(0));
    _result = (float *)a3gxmas(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"floatPtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_adputof) {

    double  _result;
    double  _arg0;
    double  _arg1;
    double  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: adputof(eoq,paps,moq);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _result = (double )adputof(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_adpuesd) {

    double  _result;
    double  _arg0;
    double  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: adpuesd(tof,mas);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _result = (double )adpuesd(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_adpumoq) {

    double  _result;
    double  _arg0;
    double  _arg1;
    double  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: adpumoq(eoq,paps,tof);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _result = (double )adpumoq(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_adpumas) {

    double  _result;
    double  _arg0;
    double  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: adpumas(esd,tof);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _result = (double )adpumas(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_adpueoq) {

    double  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: adpueoq(istep);");
    _arg0 = (int )SvIV(ST(0));
    _result = (double )adpueoq(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_xfm) {

    double * _result;
    double  _arg0;
    double  _arg1;
    double  _arg2;
    double  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: xfm(eoq,pav,mas,crg);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    _arg3 = (double ) SvNV(ST(3));
    _result = (double *)xfm(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_xeffv1) {

    double  _result;
    double  _arg0;
    double  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: xeffv1(de,dmas);");
    _arg0 = (double ) SvNV(ST(0));
    _arg1 = (double ) SvNV(ST(1));
    _result = (double )xeffv1(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_aget) {

    double  _result;
    double * _arg0;
    int  _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: aget(x,index);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of aget. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _result = (double )aget(_arg0,_arg1);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_aset) {

    double * _arg0;
    int  _arg1;
    double  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: aset(x,idx,dval);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of aset. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (double ) SvNV(ST(2));
    aset(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

XS(_wrap_aeset) {

    double * _arg0;
    int  _arg1;
    int  _arg2;
    double  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: aeset(x,istart,ilen,dval);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of aeset. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (double ) SvNV(ST(3));
    aeset(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

XS(_wrap_asum) {

    double  _result;
    double * _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: asum(x,istart,ilen);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of asum. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (double )asum(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_aadd) {

    double * _arg0;
    double * _arg1;
    int  _arg2;
    int  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: aadd(x,y,istart,ilen);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of aadd. Expected doublePtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"doublePtr")) {
        croak("Type error in argument 2 of aadd. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    aadd(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

XS(_wrap_dmom1) {

    double  _result;
    double * _arg0;
    double * _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: dmom1(adx,ady,Nx);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of dmom1. Expected doublePtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"doublePtr")) {
        croak("Type error in argument 2 of dmom1. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg2 = (int )SvIV(ST(2));
    _result = (double )dmom1(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_dmomN) {

    double  _result;
    double * _arg0;
    double * _arg1;
    int  _arg2;
    double  _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: dmomN(adx,ady,Nx,dN);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of dmomN. Expected doublePtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"doublePtr")) {
        croak("Type error in argument 2 of dmomN. Expected doublePtr.");
        XSRETURN(1);
    }
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (double ) SvNV(ST(3));
    _result = (double )dmomN(_arg0,_arg1,_arg2,_arg3);
    ST(argvi) = sv_newmortal();
    sv_setnv(ST(argvi++), (double) _result);
    XSRETURN(argvi);
}

XS(_wrap_I) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: I(ir,Nc,ic);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _result = (int )I(_arg0,_arg1,_arg2);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_I3) {

    int  _result;
    int  _arg0;
    int  _arg1;
    int  _arg2;
    int  _arg3;
    int  _arg4;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 5) || (items > 5)) 
        croak("Usage: I3(ir,Nc,ic,ip,Nr);");
    _arg0 = (int )SvIV(ST(0));
    _arg1 = (int )SvIV(ST(1));
    _arg2 = (int )SvIV(ST(2));
    _arg3 = (int )SvIV(ST(3));
    _arg4 = (int )SvIV(ST(4));
    _result = (int )I3(_arg0,_arg1,_arg2,_arg3,_arg4);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_dvec_get) {

    double * _result;
    long  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: dvec_get(n);");
    _arg0 = (long )SvIV(ST(0));
    _result = (double *)dvec_get(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setref_pv(ST(argvi++),"doublePtr", (void *) _result);
    XSRETURN(argvi);
}

XS(_wrap_dvec_free) {

    double * _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: dvec_free(v);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"doublePtr")) {
        croak("Type error in argument 1 of dvec_free. Expected doublePtr.");
        XSRETURN(1);
    }
    dvec_free(_arg0);
    XSRETURN(argvi);
}

XS(_wrap_libhefrev) {

    char * _result;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 0) || (items > 0)) 
        croak("Usage: libhefrev();");
    _result = (char *)libhefrev();
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

XS(_wrap_sec70_time) {

    long * _arg0;
    long * _arg1;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 2) || (items > 2)) 
        croak("Usage: sec70_time(alltime,sec70);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"longPtr")) {
        croak("Type error in argument 1 of sec70_time. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"longPtr")) {
        croak("Type error in argument 2 of sec70_time. Expected longPtr.");
        XSRETURN(1);
    }
    sec70_time(_arg0,_arg1);
    XSRETURN(argvi);
}

XS(_wrap_doy_time) {

    long * _arg0;
    long * _arg1;
    long * _arg2;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 3) || (items > 3)) 
        croak("Usage: doy_time(alltime,doy,year);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"longPtr")) {
        croak("Type error in argument 1 of doy_time. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"longPtr")) {
        croak("Type error in argument 2 of doy_time. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"longPtr")) {
        croak("Type error in argument 3 of doy_time. Expected longPtr.");
        XSRETURN(1);
    }
    doy_time(_arg0,_arg1,_arg2);
    XSRETURN(argvi);
}

XS(_wrap_date_time) {

    long * _arg0;
    long * _arg1;
    long * _arg2;
    long * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: date_time(alltime,mday,mon,year);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"longPtr")) {
        croak("Type error in argument 1 of date_time. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"longPtr")) {
        croak("Type error in argument 2 of date_time. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"longPtr")) {
        croak("Type error in argument 3 of date_time. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"longPtr")) {
        croak("Type error in argument 4 of date_time. Expected longPtr.");
        XSRETURN(1);
    }
    date_time(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

XS(_wrap_timstr) {

    char * _result;
    long  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: timstr(sec70);");
    _arg0 = (long )SvIV(ST(0));
    _result = (char *)timstr(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setpv((SV*)ST(argvi++),(char *) _result);
    XSRETURN(argvi);
}

XS(_wrap_ltcaldat) {

    long * _arg0;
    long * _arg1;
    long * _arg2;
    long * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: ltcaldat(julian,mm,id,iyyy);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"longPtr")) {
        croak("Type error in argument 1 of ltcaldat. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"longPtr")) {
        croak("Type error in argument 2 of ltcaldat. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"longPtr")) {
        croak("Type error in argument 3 of ltcaldat. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"longPtr")) {
        croak("Type error in argument 4 of ltcaldat. Expected longPtr.");
        XSRETURN(1);
    }
    ltcaldat(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

XS(_wrap_ltjulday) {

    long * _arg0;
    long * _arg1;
    long * _arg2;
    long * _arg3;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 4) || (items > 4)) 
        croak("Usage: ltjulday(mm,id,iyyy,julday);");
    if (SWIG_GetPtr(ST(0),(void **) &_arg0,"longPtr")) {
        croak("Type error in argument 1 of ltjulday. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(1),(void **) &_arg1,"longPtr")) {
        croak("Type error in argument 2 of ltjulday. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(2),(void **) &_arg2,"longPtr")) {
        croak("Type error in argument 3 of ltjulday. Expected longPtr.");
        XSRETURN(1);
    }
    if (SWIG_GetPtr(ST(3),(void **) &_arg3,"longPtr")) {
        croak("Type error in argument 4 of ltjulday. Expected longPtr.");
        XSRETURN(1);
    }
    ltjulday(_arg0,_arg1,_arg2,_arg3);
    XSRETURN(argvi);
}

XS(_wrap_is_leap) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: is_leap(iyear);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )is_leap(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

XS(_wrap_perr_setlevel) {

    int  _result;
    int  _arg0;
    int argvi = 0;
    dXSARGS ;

    cv = cv;
    if ((items < 1) || (items > 1)) 
        croak("Usage: perr_setlevel(ilevel);");
    _arg0 = (int )SvIV(ST(0));
    _result = (int )perr_setlevel(_arg0);
    ST(argvi) = sv_newmortal();
    sv_setiv(ST(argvi++),(IV) _result);
    XSRETURN(argvi);
}

/*
 * This table is used by the pointer type-checker
 */
static struct { char *n1; char *n2; void *(*pcnv)(void *); } _swig_mapping[] = {
    { "unsigned short","short",0},
    { "long","unsigned long",0},
    { "long","signed long",0},
    { "signed short","short",0},
    { "signed int","int",0},
    { "short","unsigned short",0},
    { "short","signed short",0},
    { "unsigned long","long",0},
    { "int","unsigned int",0},
    { "int","signed int",0},
    { "unsigned int","int",0},
    { "signed long","long",0},
{0,0,0}};

XS(_wrap_perl5_libhef_var_init) {
    dXSARGS;
    SV *sv;
    cv = cv; items = items;
    XSRETURN(1);
}
#ifdef __cplusplus
extern "C"
#endif
XS(boot_libhef) {
	 dXSARGS;
	 char *file = __FILE__;
	 cv = cv; items = items;
	 newXS("libhef::var_libhef_init", _wrap_perl5_libhef_var_init, file);
	 newXS("libhef::a3opencyclefile", _wrap_a3opencyclefile, file);
	 newXS("libhef::a3closecyclefile", _wrap_a3closecyclefile, file);
	 newXS("libhef::a3readcycle", _wrap_a3readcycle, file);
	 newXS("libhef::a3expand", _wrap_a3expand, file);
	 newXS("libhef::a3gtime", _wrap_a3gtime, file);
	 newXS("libhef::a3zrecid", _wrap_a3zrecid, file);
	 newXS("libhef::a3hdffn", _wrap_a3hdffn, file);
	 newXS("libhef::a3ncfver", _wrap_a3ncfver, file);
	 newXS("libhef::a3gdpuhk", _wrap_a3gdpuhk, file);
	 newXS("libhef::a3cycx_nominal", _wrap_a3cycx_nominal, file);
	 newXS("libhef::a3gxeqdpu_i", _wrap_a3gxeqdpu_i, file);
	 newXS("libhef::a3gxeqtab_i", _wrap_a3gxeqtab_i, file);
	 newXS("libhef::a3gxeqaux_i", _wrap_a3gxeqaux_i, file);
	 newXS("libhef::a3gxpavdpu", _wrap_a3gxpavdpu, file);
	 newXS("libhef::a3xpavlev", _wrap_a3xpavlev, file);
	 newXS("libhef::a3xadc", _wrap_a3xadc, file);
	 newXS("libhef::a3xtrigcal", _wrap_a3xtrigcal, file);
	 newXS("libhef::a3xtrigmode", _wrap_a3xtrigmode, file);
	 newXS("libhef::a3gcnq", _wrap_a3gcnq, file);
	 newXS("libhef::a3gcnm", _wrap_a3gcnm, file);
	 newXS("libhef::a3gbrtab", _wrap_a3gbrtab, file);
	 newXS("libhef::a3gmrtab", _wrap_a3gmrtab, file);
	 newXS("libhef::a3gxhk", _wrap_a3gxhk, file);
	 newXS("libhef::a3gxfsr_i", _wrap_a3gxfsr_i, file);
	 newXS("libhef::a3gxdcr_i", _wrap_a3gxdcr_i, file);
	 newXS("libhef::a3gxtcr_i", _wrap_a3gxtcr_i, file);
	 newXS("libhef::a3gxsdr_i", _wrap_a3gxsdr_i, file);
	 newXS("libhef::a3gxpr_i", _wrap_a3gxpr_i, file);
	 newXS("libhef::a3gxar_i", _wrap_a3gxar_i, file);
	 newXS("libhef::a3gxmr", _wrap_a3gxmr, file);
	 newXS("libhef::a3gxmr_i", _wrap_a3gxmr_i, file);
	 newXS("libhef::a3gxbr", _wrap_a3gxbr, file);
	 newXS("libhef::a3xbrwgt", _wrap_a3xbrwgt, file);
	 newXS("libhef::a3xnpha", _wrap_a3xnpha, file);
	 newXS("libhef::a3gxnr", _wrap_a3gxnr, file);
	 newXS("libhef::a3gxmoq_i", _wrap_a3gxmoq_i, file);
	 newXS("libhef::a3gxmas_i", _wrap_a3gxmas_i, file);
	 newXS("libhef::a3gxtof_i", _wrap_a3gxtof_i, file);
	 newXS("libhef::a3gxesd_i", _wrap_a3gxesd_i, file);
	 newXS("libhef::a3gxdid_i", _wrap_a3gxdid_i, file);
	 newXS("libhef::a3gxsec_i", _wrap_a3gxsec_i, file);
	 newXS("libhef::a3gxrng_i", _wrap_a3gxrng_i, file);
	 newXS("libhef::a3cxmoq", _wrap_a3cxmoq, file);
	 newXS("libhef::a3cxmas", _wrap_a3cxmas, file);
	 newXS("libhef::a3xellmmq", _wrap_a3xellmmq, file);
	 newXS("libhef::a3xrell", _wrap_a3xrell, file);
	 newXS("libhef::a3xelletm", _wrap_a3xelletm, file);
	 newXS("libhef::a3mmq", _wrap_a3mmq, file);
	 newXS("libhef::a3eth", _wrap_a3eth, file);
	 newXS("libhef::a3qth", _wrap_a3qth, file);
	 newXS("libhef::a3xmrspd", _wrap_a3xmrspd, file);
	 newXS("libhef::a3auxspd", _wrap_a3auxspd, file);
	 newXS("libhef::a3xeoqsumv1", _wrap_a3xeoqsumv1, file);
	 newXS("libhef::a3cycm_nominal", _wrap_a3cycm_nominal, file);
	 newXS("libhef::a3ccycm", _wrap_a3ccycm, file);
	 newXS("libhef::a3ccycm_mcalev", _wrap_a3ccycm_mcalev, file);
	 newXS("libhef::a3ccycm_mcolev", _wrap_a3ccycm_mcolev, file);
	 newXS("libhef::a3ccycm_hyplev", _wrap_a3ccycm_hyplev, file);
	 newXS("libhef::a3ccycm_eqhk", _wrap_a3ccycm_eqhk, file);
	 newXS("libhef::a3ccycm_eqtabnom", _wrap_a3ccycm_eqtabnom, file);
	 newXS("libhef::a3gmeqdpu_i", _wrap_a3gmeqdpu_i, file);
	 newXS("libhef::a3mhyplev", _wrap_a3mhyplev, file);
	 newXS("libhef::a3gmhk", _wrap_a3gmhk, file);
	 newXS("libhef::a3mbrwgt", _wrap_a3mbrwgt, file);
	 newXS("libhef::a3gmfsr_i", _wrap_a3gmfsr_i, file);
	 newXS("libhef::a3gmfsra_i", _wrap_a3gmfsra_i, file);
	 newXS("libhef::a3gmfsrb_i", _wrap_a3gmfsrb_i, file);
	 newXS("libhef::a3gmfsrab_i", _wrap_a3gmfsrab_i, file);
	 newXS("libhef::a3gmrsr_i", _wrap_a3gmrsr_i, file);
	 newXS("libhef::a3gmdcr_i", _wrap_a3gmdcr_i, file);
	 newXS("libhef::a3gmmfsr_i", _wrap_a3gmmfsr_i, file);
	 newXS("libhef::a3gmmdcr_i", _wrap_a3gmmdcr_i, file);
	 newXS("libhef::a3mnpha", _wrap_a3mnpha, file);
	 newXS("libhef::a3gmdid", _wrap_a3gmdid, file);
	 newXS("libhef::a3gmsec", _wrap_a3gmsec, file);
	 newXS("libhef::a3gmstamp", _wrap_a3gmstamp, file);
	 newXS("libhef::a3gmstopk1", _wrap_a3gmstopk1, file);
	 newXS("libhef::a3gmstopk2", _wrap_a3gmstopk2, file);
	 newXS("libhef::a3gmtof", _wrap_a3gmtof, file);
	 newXS("libhef::a3cmtof", _wrap_a3cmtof, file);
	 newXS("libhef::a3mcntpha", _wrap_a3mcntpha, file);
	 newXS("libhef::a3mtofhist", _wrap_a3mtofhist, file);
	 newXS("libhef::a3mtof1_i", _wrap_a3mtof1_i, file);
	 newXS("libhef::a3mtof2_i", _wrap_a3mtof2_i, file);
	 newXS("libhef::a3gshk", _wrap_a3gshk, file);
	 newXS("libhef::a3gxeqtab", _wrap_a3gxeqtab, file);
	 newXS("libhef::a3gxeqdpu", _wrap_a3gxeqdpu, file);
	 newXS("libhef::a3gxfsr", _wrap_a3gxfsr, file);
	 newXS("libhef::a3gxdcr", _wrap_a3gxdcr, file);
	 newXS("libhef::a3gxtcr", _wrap_a3gxtcr, file);
	 newXS("libhef::a3gxsdr", _wrap_a3gxsdr, file);
	 newXS("libhef::a3gxpr", _wrap_a3gxpr, file);
	 newXS("libhef::a3gxar", _wrap_a3gxar, file);
	 newXS("libhef::a3gmeqtab", _wrap_a3gmeqtab, file);
	 newXS("libhef::a3gmeqtab_i", _wrap_a3gmeqtab_i, file);
	 newXS("libhef::a3gmeqdpu", _wrap_a3gmeqdpu, file);
	 newXS("libhef::a3gxmoq", _wrap_a3gxmoq, file);
	 newXS("libhef::a3gxmas", _wrap_a3gxmas, file);
	 newXS("libhef::adputof", _wrap_adputof, file);
	 newXS("libhef::adpuesd", _wrap_adpuesd, file);
	 newXS("libhef::adpumoq", _wrap_adpumoq, file);
	 newXS("libhef::adpumas", _wrap_adpumas, file);
	 newXS("libhef::adpueoq", _wrap_adpueoq, file);
	 newXS("libhef::xfm", _wrap_xfm, file);
	 newXS("libhef::xeffv1", _wrap_xeffv1, file);
	 newXS("libhef::aget", _wrap_aget, file);
	 newXS("libhef::aset", _wrap_aset, file);
	 newXS("libhef::aeset", _wrap_aeset, file);
	 newXS("libhef::asum", _wrap_asum, file);
	 newXS("libhef::aadd", _wrap_aadd, file);
	 newXS("libhef::dmom1", _wrap_dmom1, file);
	 newXS("libhef::dmomN", _wrap_dmomN, file);
	 newXS("libhef::I", _wrap_I, file);
	 newXS("libhef::I3", _wrap_I3, file);
	 newXS("libhef::dvec_get", _wrap_dvec_get, file);
	 newXS("libhef::dvec_free", _wrap_dvec_free, file);
	 newXS("libhef::libhefrev", _wrap_libhefrev, file);
	 newXS("libhef::sec70_time", _wrap_sec70_time, file);
	 newXS("libhef::doy_time", _wrap_doy_time, file);
	 newXS("libhef::date_time", _wrap_date_time, file);
	 newXS("libhef::timstr", _wrap_timstr, file);
	 newXS("libhef::ltcaldat", _wrap_ltcaldat, file);
	 newXS("libhef::ltjulday", _wrap_ltjulday, file);
	 newXS("libhef::is_leap", _wrap_is_leap, file);
	 newXS("libhef::perr_setlevel", _wrap_perr_setlevel, file);
{
   int i;
   for (i = 0; _swig_mapping[i].n1; i++)
        SWIG_RegisterMapping(_swig_mapping[i].n1,_swig_mapping[i].n2,_swig_mapping[i].pcnv);
}
	 ST(0) = &PL_sv_yes;
	 XSRETURN(1);
}
