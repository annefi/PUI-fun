%!PS-Adobe-3.0
%%Title: SpillRates.cc, SpillRates.h
%%For: Jim Raines
%%Creator: a2ps version 4.13
%%CreationDate: Mon Aug  9 11:20:38 2004
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*  ) c n
(  Filename: SpillRates.cc) N
() N
(  Description:) N
(    This class contains spillover matrices and routines needed to perform) N
(    spillover correction of box rates.) N
() N
(  Author:  Jim Raines, 31Jul2001) N
() N
(  Method:) N
() N
(  Revision controlled by CVS:) N
(  $Id: SpillRates.cc,v 1.7 2004/07/28 13:28:35 jraines Exp $) N
() N
(  Major Modification History:) N
() N
(*/) N
() p n
(#include) K
( ") p
(swindal.h) str
(") p n
(#include) K
( ") p
(swindal_nr.h) str
(") p n
() N
(using) K
( std::ofstream;) p n
() N
(SpillRates::SpillRates\() S
(int) k
( N\){) p n
() N
(  TNT::Vector<) S
(float) k
(> tmpv\(N, 0.0\);) p n
(  ) S
(for) K
( \() p
(int) k
( i = 0; i < MAXEDB; i++\){) p n
(    Nspill.push_back\(tmpv\);) N
(    Nspilltil.push_back\(tmpv\);) N
(  }) N
() N
(  names.reserve\(N\);) N
() N
(  negRateCutoff = 0.03;) N
(  maxIterations = 5;) N
(}) N
() N
(float) k
( SpillRates::getCorSpillRate\() p
(int) k
( nedb, ) p
(int) k
( s\){) p n
(  ) S
(return) K
(\(Nspilltil[nedb][s]\);) p n
(}  ) N
() N
(float) k
( SpillRates::getCorSpillRate\() p
(int) k
( s\){) p n
() N
(  ) S
(float) k
( sum = 0.0;) p n
(  ) S
(for) K
( \() p
(int) k
( nedb = FIRSTEDB; nedb < MAXEDB; nedb++\){) p n
(    sum += Nspilltil[nedb][s];) N
(  }) N
() N
(  ) S
(return) K
(\(sum\);) p n
(}  ) N
() N
(void) k
( SpillRates::print\() p
(void) k
(\){) p n
(  ) S
(float) k
( sum;) p n
() N
(  ) S
(for) K
( \() p
(int) k
( s = 0; s < names.size\(\); s++\){) p n
(    sum = 0.0;) N
() N
(    ) S
(for) K
( \() p
(int) k
( nedb = FIRSTEDB; nedb < MAXEDB; nedb++\){) p n
(      sum += Nspilltil[nedb][s];) N
(    }) N
() N
(    cout << names[s] << ") S
( ) str
(" << sum << endl;) p n
(  }) N
() N
(  ) S
(return) K
(;) p n
(}) N
() N
(void) k
( SpillRates::dump\() p
(int) k
( s\){) p n
(  ) S
(float) k
( sum;) p n
(SpillRates.cc) (Page 1/7) (Jul 28, 04 9:28) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  sum = 0.0;) N
() N
(  ) S
(for) K
( \() p
(int) k
( nedb = FIRSTEDB; nedb < MAXEDB; nedb++\){) p n
(    sum += Nspill[nedb][s];) N
(  }) N
() N
(  cout << names[s] << ") S
( ) str
(" << sum << ") p
(\() str
(";) p n
() N
(  ) S
(for) K
( \() p
(int) k
( nedb = FIRSTEDB; nedb < MAXEDB; nedb++\){) p n
(    cout << ") S
( ) str
(" << Nspill[nedb][s];) p n
(  }) N
() N
(  cout << ") S
( \)) str
(" << endl;) p n
() N
(  ) S
(return) K
(;) p n
(}) N
(void) k
( SpillRates::dump\() p
(void) k
(\){) p n
(  ) S
(float) k
( sum;) p n
() N
(  ) S
(for) K
( \() p
(int) k
( s = 0; s < names.size\(\); s++\){) p n
(    dump\(s\);) N
(  }) N
() N
(  ) S
(return) K
(;) p n
(}) N
() N
(void) k
( SpillRates::printRaw\() p
(void) k
(\){) p n
(  ) S
(float) k
( sum;) p n
() N
(  ) S
(for) K
( \() p
(int) k
( s = 0; s < names.size\(\); s++\){) p n
(    sum = 0.0;) N
() N
(    ) S
(for) K
( \() p
(int) k
( nedb = FIRSTEDB; nedb < MAXEDB; nedb++\){) p n
(      sum += Nspill[nedb][s];) N
(    }) N
() N
(    cout << names[s] << ") S
( ) str
(" << sum << endl;) p n
(  }) N
() N
(  ) S
(return) K
(;) p n
(}) N
() N
(int) k
( SpillRates::calc\(vector<Ion>& orig_grp, BoxRates BR\){) p n
(  ) S
(/* Method: ) c n
() N
(       While looping over EDBs \(charge steps\), the passed in group is) N
(       first run through calc2.  Calc2 returns a list of ions had) N
(       negative spill rates at that EDB.  These ions are then removed) N
(       from the group and passed into calc2 again.  There is) N
(       currently *only* one of these iterations.) N
(  */) N
() p n
(  string thisprog = ") S
(SpillRates::calc) str
(";) p n
(  ) S
(int) k
( result;) p n
() N
(  ) S
(// grab ion names for printing and misc) c n
(  names.clear\(\);  ) p
(// get rid of previous names, prob un-needed) c n
(  vector<Ion> grp; ) p
(// local group, changes in size with iterations) c n
(  ) p
(for) K
( \() p
(int) k
( s = 0; s < orig_grp.size\(\); s++\){) p n
(    names.push_back\(orig_grp[s].name\);) N
(    grp.push_back\(orig_grp[s]\);) N
(  }) N
(  ) N
(  vector<TNT::Vector<) S
(float) k
(> > B;  ) p n
(  B = BR.getBoxrates\(\);) N
() N
(  ) S
(int) k
( niter;) p n
(  ) S
(for) K
( \() p
(int) k
( nedb = FIRSTEDB; nedb < MAXEDB; nedb++\){) p n
(SpillRates.cc) (Page 2/7) (Jul 28, 04 9:28) title
border
grestore
(Printed by Jim Raines) rhead
(SpillRates.cc) (1/5) (Monday August 09, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(// init B for this EDB to size of original group) c n
(    TNT::Vector<) p
(float) k
(> Bedb\(orig_grp.size\(\), 0.0\);) p n
(    Bedb = B[nedb];) N
() N
(    ) S
(// init grp for this EDB to size of original group) c n
(    vector<Ion> grp; ) p
(// local group, changes in size with iterations) c n
(    grp.clear\(\);) p n
(    ) S
(for) K
( \() p
(int) k
( s = 0; s < orig_grp.size\(\); s++\){) p n
(      grp.push_back\(orig_grp[s]\);) N
(    }) N
() N
(    ) S
(// local versions of class arrays; C2 refers to routine name calc2) c n
(    vector<) p
(bool) k
(> badspecies\(orig_grp.size\(\), ) p
(false) k
(\); ) p
(// badspecies[s] = true) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      ) S
(// means species s to be) c n
(                                              ) p
(// removed from analysis) c n
() p n
(    TNT::Vector<) S
(float) k
(> NspillC2\(orig_grp.size\(\),0.0\);    ) p
(// spillover rates) c n
(    TNT::Vector<) p
(float) k
(> NspilltilC2\(orig_grp.size\(\),0.0\); ) p
(// ghost-count-correcte) c n
(d) N
() p n
(    niter = 1;) N
(    ) S
(while) K
( \(niter < maxIterations\){ ) p
(// iterate calc2) c n
() p n
(      ) S
(if) K
( \(gDbgLvl >= 1\) {) p n
() S 8 T (cout << thisprog << ") S
( -I- working on iteration ) str
(" << niter << endl;) p n
(      }) N
() N
(      result = calc2\(grp,nedb,Bedb,NspillC2,NspilltilC2,badspecies\);) N
() N
(      ) S
(if) K
( \(result == 0\) ) p
(break) K
(;  ) p
(// we are done, why bother) c n
() p n
(      ) S
(int) k
( newsize = grp.size\(\);  ) p
(// newsize starts with old size) c n
(      ) p
(float) k
( sumPosNSpilltilC2 = 0.0;) p n
(      ) S
(for) K
( \() p
(int) k
( s = 0; s < grp.size\(\); s++\){) p n
() S 8 T () S
(if) K
( \(NspilltilC2[s] < 0.0\) {) p n
() S 8 T (  badspecies[s] = ) S
(true) k
(;) p n
() S 8 T (  newsize--;) N
() S 8 T (}) N
() S 8 T () S
(else) K
( { ) p
(// calculate sum of positive rates) c n
() p 8 T (  sumPosNSpilltilC2 += NspillC2[s];) N
() S 8 T (}) N
(      }) N
() N
(      ) S
(if) K
( \(newsize == grp.size\(\)\) ) p
(break) K
(;  ) p
(// no bad spill rates, done w/iter) c n
() p n
(      ) S
(/* ---------------------------------------------------------------------) c n
() S 8 T ( Re-check bad species to be sure they are big enough to worry about) N
() S 8 T ( ---------------------------------------------------------------------) N
(      */) N
(      ) p
(float) k
( frac;) p n
(      ) S
(for) K
( \() p
(int) k
( s = 0; s < grp.size\(\); s++\){) p n
(        ) S
(// Remove 'bad' flag for species with small enough spill rates) c n
() p 8 T () S
(if) K
( \(badspecies[s]\){) p n
() S 8 T (  frac = fabs\(NspilltilC2[s]/sumPosNSpilltilC2\);) N
() S 8 T (  ) S
(if) K
( \( frac <= negRateCutoff \){ ) p
(// put it back) c n
() p 8 T (    badspecies[s] = ) S
(false) k
(;) p n
() S 8 T (    newsize++;) N
() S 8 T (  }) N
() S 8 T (}) N
(      }) N
() N
(      ) S
(if) K
( \(newsize == grp.size\(\)\) ) p
(break) K
(;  ) p
(// no bad spill rates, done w/iter) c n
() p n
(      ) S
(/* ---------------------------------------------------------------------) c n
() S 8 T ( Copy into tmp. variables) N
() S 8 T ( NOTE:  Temporary variables must be used since resize cannot be done ) N
() S 8 T ( until good species are copied out.) N
() S 8 T ( ---------------------------------------------------------------------) N
(      */) N
(SpillRates.cc) (Page 3/7) (Jul 28, 04 9:28) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      vector<Ion> tmpgrp;) p n
(      TNT::Vector<) S
(float) k
(> tmpB\(newsize, 0.0\);) p n
(      TNT::Vector<) S
(float) k
(> tmpNspillC2\(newsize, 0.0\);) p n
(      TNT::Vector<) S
(float) k
(> tmpNspilltilC2\(newsize, 0.0\);) p n
(      ) S
(int) k
( t = 0;) p n
(      ) S
(for) K
( \() p
(int) k
( s = 0; s < grp.size\(\); s++\){) p n
() S 8 T () S
(// Form new group \(etc\) excluding 'bad' species) c n
() p 8 T () S
(if) K
( \( ! badspecies[s]\){) p n
() S 8 T (  ) S
(if) K
( \(t < newsize\){) p n
() S 8 T (    tmpgrp[t] = grp[s];) N
() S 8 T (    tmpB[t] = Bedb[s];) N
() S 8 T (    t++;) N
() S 8 T (  }) N
() S 8 T (  ) S
(else) K
({) p n
() S 8 T (    cout << thisprog << ") S
( -E- tried to write beyond \(t=) str
(" << t) p n
() S 8 T () S 16 T ( << ") S
(\) new group size \() str
(") p n
() S 8 T () S 16 T ( << newsize << ") S
(\)) str
(" << endl;) p n
() S 8 T (  }) N
() S 8 T (}) N
() S 8 T () S
(else) K
( {) p n
() S 8 T (  ) S
(if) K
( \(gDbgLvl >= 3\){) p n
() S 8 T (    cout << thisprog << ") S
( -I- ) str
(" ) p n
() S 8 T () S 16 T ( << grp[s].name ) N
() S 8 T () S 16 T ( << ") S
( \(s=) str
(" << s << ") p
(\) REMOVED from analysis in edb ) str
(" ) p n
() S 8 T () S 16 T ( << nedb << endl;) N
() S 8 T (  }) N
() S 8 T (}) S 16 T (  ) N
(      }) N
() N
(      ) S
(/* -------------------------------------------------------------------) c n
() S 8 T ( Resize non-tmp arrays and fill with contents of tmp arrays) N
() S 8 T ( ------------------------------------------------------------------- */) N
(      ) p
(// is group right size?) c n
(      TNT::Vector<) p
(float) k
(> Bedb\(newsize,0.0\);) p n
(      TNT::Vector<) S
(float) k
(> NspillC2\(newsize,0.0\);    ) p
(// spillover rates) c n
(      TNT::Vector<) p
(float) k
(> NspilltilC2\(newsize,0.0\); ) p
(// ghost-count-corrected) c n
(      ) p
(for) K
( \() p
(int) k
( s = 0; s < newsize; s++\){) p n
() S 8 T (NspillC2[s] = tmpNspillC2[s];) N
() S 8 T (NspilltilC2[s] = tmpNspilltilC2[s];) N
() S 8 T (Bedb[s] = tmpB[s];) N
(      }) N
(      ) S
(// resize grp to the size of tmpgrp and copies in elements of tmpgrp) c n
(      grp.swap\(tmpgrp\);  ) p n
() N
(      ) S
(// Does not work; causes endless loop) c n
(      ) p
(//tmpgrp.~vector<Ion>\(\);  // destroy tmpgrp) c n
() p n
(      ) S
(// re-init and resize) c n
(      vector<) p
(bool) k
(> badspecies\(newsize, ) p
(false) k
(\);) p n
() N
(      niter++;) N
(    }) N
() N
(    ) S
(// copy results into class-wide vectors, taking missing into account,) c n
(    ) p
(// now that we are done iterating this EDB.) c n
(    ) p
(int) k
( sC2 = 0;  ) p
(// species counter in C2 arrays) c n
(    ) p
(for) K
(\() p
(int) k
( s = 0; s < orig_grp.size\(\); s++\){) p n
(      ) S
(if) K
( \(orig_grp[s].name == grp[sC2].name\){) p n
() S 8 T () S
(if) K
( \(NspilltilC2[sC2] >= 0.0\){) p n
() S 8 T (  Nspill[nedb][s] = NspillC2[sC2];) N
() S 8 T (  Nspilltil[nedb][s] = NspilltilC2[sC2];) N
() S 8 T (}) N
() S 8 T () S
(else) K
( {) p n
() S 8 T (  Nspill[nedb][s] = 0.0;) N
() S 8 T (  Nspilltil[nedb][s] = 0.0;) N
() S 8 T (}) N
() N
() S 8 T (sC2++;) N
(      }) N
(SpillRates.cc) (Page 4/7) (Jul 28, 04 9:28) title
border
grestore
(Printed by Jim Raines) rhead
(SpillRates.cc) (2/5) (Monday August 09, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(else) K
({) p n
( ) S 8 T (Nspill[nedb][s] = 0.0;) N
() S 8 T (Nspilltil[nedb][s] = 0.0;) N
(      }) N
(    }) N
(    ) N
(    ) N
(  } ) S
(// loop over edbs) c n
() p n
(  ) S
(return) K
(\(0\);) p n
(}) N
() N
(int) k
( SpillRates::calc2\() p
(const) K
( vector<Ion>& grp, ) p
(int) k
( nedb,) p n
() S 8 T () S 16 T (      TNT::Vector<) S
(float) k
(>& B,) p n
() S 8 T () S 16 T (      TNT::Vector<) S
(float) k
(>& NspillC2,) p n
() S 8 T () S 16 T (      TNT::Vector<) S
(float) k
(>& NspilltilC2, ) p 56 T () S 64 T (      ) N
() S 8 T () S 16 T (      vector<) S
(bool) k
(>& badspecies\){) p n
(  ) S
(/* Description:) c n
(       Does spillover rate calculations \(and part of ghost count removal\) for) N
(       all species at one charge step.) N
(  */) N
(  ) p n
(  string thisprog = ") S
(SpillRates::calc2) str
(";) p n
(  ) S
(int) k
( DbgLvl = gDbgLvl;) p n
(  ) S
(int) k
( retval = 0;  ) p
(// return value of this routine) c n
(                   ) p
(// 0 -> no bad species; 1 -> bad species exist) c n
() p n
(  ) S
(// local numerical arrays) c n
(  TNT::Matrix<) p
(float) k
(> S\(grp.size\(\),grp.size\(\),0.0\);      ) p
(// spillover matrix) c n
(  TNT::Matrix<) p
(float) k
(> Sinv\(grp.size\(\),grp.size\(\),0.0\);   ) p
(// inverse of S) c n
(  TNT::Vector<) p
(float) k
(> Btil\(grp.size\(\),0.0\); ) p
(// ghost-count-corrected box rates) c n
(  ) p
(// Bcorr are boxrates from B and Btil, depending on sign of Nspill) c n
(  TNT::Vector<) p
(float) k
(> Bcorr\(grp.size\(\),0.0\);) p n
() N
(  ) S
(/* -----------------------------------------------------------------------) c n
(     ----------------------------------------------------------------------- */) N
() p n
(  ) S
(/* ---------------- Calculate S by elements, ref. 1, eq. 3 ---------------) c n
(     ----------------------------------------------------------------------- */) N
(  ) p
(double) k
( Stofp,Stofm, Sesdp, Sesdm;  ) p
(// args to the erf in eq.) c n
(  ) p
(for) K
( \() p
(int) k
( s = 0; s < grp.size\(\); s++\){) p n
(    ) S
(for) K
( \() p
(int) k
( t = 0; t < grp.size\(\); t++\){) p n
(      ) S
(// tof + sigma) c n
(      Stofp = \(1.0/\(sqrt\(2.0\)*grp[t].stof[nedb]\)\) *) p n
() S 8 T (\(grp[s].tof[nedb] + ) N
() S 8 T ( grp[s].stof[nedb] - ) N
() S 8 T ( grp[t].tof[nedb]\);) N
() N
(      ) S
(// tof - sigma) c n
(      Stofm = \(1.0/\(sqrt\(2.0\)*grp[t].stof[nedb]\)\) *) p n
() S 8 T (\(grp[s].tof[nedb] - ) N
() S 8 T ( grp[s].stof[nedb] - ) N
() S 8 T ( grp[t].tof[nedb]\);) N
() N
(      ) S
(// esd + sigma) c n
(      Sesdp = \(1.0/\(sqrt\(2.0\)*grp[t].sesd[nedb]\)\) *) p n
() S 8 T (\(grp[s].esd[nedb] +) N
() S 8 T ( grp[s].sesd[nedb] -) N
() S 8 T ( grp[t].esd[nedb]\);) N
() N
(      ) S
(// esd - sigma) c n
(      Sesdm = \(1.0/\(sqrt\(2.0\)*grp[t].sesd[nedb]\)\) *) p n
() S 8 T (\(grp[s].esd[nedb] - ) N
() S 8 T ( grp[s].sesd[nedb] - ) N
() S 8 T ( grp[t].esd[nedb]\);) N
() N
(      S[s][t] = \(1.0/2.0\)*\( nr::erff\(Stofp\) - nr::erff\(Stofm\) \) *) N
() S 8 T (\(1.0/2.0\)*\( nr::erff\(Sesdp\) - nr::erff\(Sesdm\) \);) N
() S 8 T () N
(SpillRates.cc) (Page 5/7) (Jul 28, 04 9:28) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(if) K
( \(DbgLvl >= 4 && S[s][t] != 0.0\) {) p n
() S 8 T (cout << thisprog << ") S
( -D- S[) str
(" ) p n
() S 8 T (     << nedb << ") S
(][) str
(") p n
() S 8 T (     << s << ") S
(][) str
(") p n
() S 8 T (     << t << ") S
(]=) str
(") p n
() S 8 T (     << S[s][t] << endl;) N
(      }) N
() N
(    } ) S
(// loop over species t) c n
(  } ) p
(// loop over species s) c n
(    ) p n
(  ) S
(/* ----------------------- invert S --------------------------------------) c n
(     ----------------------------------------------------------------------- */) N
(  Sinv = Invert\(S\);) p n
() N
(  ) S
(/* --- test inversion --- */) c n
(  ) p
(if) K
( \(nedb == 48 && DbgLvl >= 3\) {) p n
(    cout << thisprog << ") S
( -D- testing inversion...) str
(" << endl;) p n
(    TNT::Matrix<) S
(float) k
(> I\(S.dim\(1\),S.dim\(1\), 1.0E-5\);) p n
(    TNT::Matrix<) S
(float) k
(> P\(S.dim\(1\),S.dim\(1\), 0.0\);) p n
() N
(    P = S * Sinv;) N
(    ) S
(// make identity matrix) c n
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < I.dim\(1\); i++\){) p n
(      I[i][i] = 1.0;) N
(    }) N
(    ) N
(    ) S
(//if \(I == 1.0\) cout << thisprog << " -D- I == 1.0" << endl;) c n
() p n
(    ) S
(if) K
( \( P > I\){) p n
(      cout << thisprog << ") S
( -D- S*Sinv > I) str
(" << endl;) p n
(    }) N
() N
(    ) S
(if) K
( \(0\){) p n
(      ofstream fout;) N
(      fout.open\(") S
(invprod.axlv2) str
("\);) p n
(      fout << P;) N
(      fout.close\(\);) N
(    }) N
(  }) N
() N
(  ) S
(/* ---------------- calculate spillover rates ----------------------------) c n
(     ----------------------------------------------------------------------- */) N
(  NspillC2 = Sinv * B;) p n
(  ) N
(  ) S
(/* --- calculate ghost-count-correct box and spillover rates \(eq 8\) ------) c n
(     ----------------------------------------------------------------------- */) N
(  ) p
(// FIX: only calc for species with Nspill < 0 ?) c n
(  ) p
(for) K
( \() p
(int) k
( s = 0; s < grp.size\(\); s++\){) p n
(    ) S
(// if-block replaces Heaveside step function, theta, in eq 8) c n
(    ) p
(if) K
( \(NspillC2[s] >= 0.0\){  ) p
(// Bcorr[s] is B[s]  ) c n
(      Bcorr[s] = B[s];) p n
(    }) N
(    ) S
(else) K
( ) p
(if) K
( \(NspillC2[s] < 0.0\){ ) p
(// Bcorr[s] is Btil[s] in eq. 8) c n
(      ) p
(for) K
( \() p
(int) k
( t = 0; t < grp.size\(\); t++\){) p n
() S 8 T () S
(if) K
( \(t != s\){) p n
() S 8 T (  ) S
(// derived from equation 7) c n
() p 8 T (  Bcorr[s] += - Sinv[s][t] * B[t]) N
() S 8 T (    / Sinv[s][s];) N
() S 8 T (}) N
(      } ) S
(// loop over species t) c n
(    }) p n
(  } ) S
(// loop over species s) c n
() p n
(  NspilltilC2 = Sinv * Bcorr;) N
() N
(  ) S
(return) K
(\(retval\);) p n
(}) N
() N
(SpillRates.cc) (Page 6/7) (Jul 28, 04 9:28) title
border
grestore
(Printed by Jim Raines) rhead
(SpillRates.cc) (3/5) (Monday August 09, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k
( SpillRates::setNegRateCutoff\() p
(float) k
( cutoff\){) p n
(  ) S
(if) K
( \(cutoff > 0 && cutoff < 1.0\)  negRateCutoff = cutoff;) p n
(  ) S
(else) K
( ) p
(if) K
( \(gDbgLvl >= 1\)) p n
(    cout << ") S
(SpillRates::setNegRateCutoff -E- cutoff out of range \() str
(") p n
() S 8 T ( << cutoff << ") S
(\); ) str
(" ) p n
() S 8 T ( << ") S
(should be 0 < cutoff < 1.0) str
(" << endl;) p n
(}) N
() N
(float) k
( SpillRates::getNegRateCutoff\() p
(void) k
(\){) p n
(  ) S
(return) K
(\(negRateCutoff\);) p n
(}) N
() N
(void) k
( SpillRates::setMaxIterations\() p
(unsigned) k
( ) p
(int) k
( maxiter\){) p n
(  maxIterations = maxiter;) N
(}) N
(int) k
(  SpillRates::getMaxIterations\() p
(void) k
(\){) p n
(  ) S
(return) K
(\(maxIterations\);) p n
(}) N
() N
() N
(/* -----------------) c n
(   PRIVATE FUNCTIONS) N
(   -----------------) N
(*/) N
() p n
(SpillRates.cc) (Page 7/7) (Jul 28, 04 9:28) title
border
grestore
(Printed by Jim Raines) rhead
(SpillRates.cc) (4/5) (Monday August 09, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*  ) c n
(  Filename: SpillRates.h) N
() N
(  Description:) N
(    This class contains spillover matrices and routines needed to perform) N
(    spillover correction of box rates.) N
() N
(  Author:  Jim Raines, 31Jul2001) N
() N
(  Method:) N
(    Perform calculations according to eq. 2, 5, 7, and 8 from ref. 1) N
(    in swindal.h.) N
() N
(  Revision controlled by CVS:) N
(  $Id: SpillRates.h,v 1.4 2003/11/06 21:53:09 jraines Exp $) N
() N
(  Major Modification History:) N
() N
(*/) N
() p n
(class SpillRates {) N
( public:) N
(  ) S
(// constructor) c n
(  SpillRates::SpillRates\() p
(int) k
(\);) p n
() N
(  ) S
(// printing functions) c n
(  ) p
(void) k
( SpillRates::print\() p
(void) k
(\); ) p
(// print sum for each species) c n
(  ) p
(void) k
( SpillRates::printRaw\() p
(void) k
(\); ) p
(// print sum of uncorrect. for each spec.) c n
(  ) p
(void) k
( SpillRates::dump\() p
(int) k
( s\); ) p
(// print sum and per edb rate for each species) c n
(  ) p
(void) k
( SpillRates::dump\() p
(void) k
(\);  ) p
(// run dump\(int s\) over all species) c n
() p n
(  ) S
(int) k
( calc\(vector<Ion>& group, BoxRates BR\);) p n
() N
(  ) S
(// get ghost-count corrected spill rate edb=nedb and species=s) c n
(  ) p
(float) k
( getCorSpillRate\() p
(int) k
( nedb, ) p
(int) k
( s\);) p n
(  ) S
(float) k
( getCorSpillRate\() p
(int) k
( s\);) p n
() N
(  ) S
(// FIX: Add generic named functions) c n
(  ) p
(// getRate\(int nedb, int s\), getRateSum\(int s\)) c n
() p n
(  ) S
(/* Set/get negative rate cutoff value) c n
(     When a particular spill rate exceeds this fraction of the rate sum, it is) N
(     dropped and the spill rates are calculated again for that EDB.) N
(     Allowed values: 0 < cutoff < 1.0) N
(  */) N
(  ) p
(void) k
( setNegRateCutoff\() p
(float) k
(\);) p n
(  ) S
(float) k
( getNegRateCutoff\() p
(void) k
(\);) p n
() N
(  ) S
(/* Set/get maximum number of iterations in ghost-count corrected) c n
(     spillover rate calculation.  Be careful setting this very high \(>10\).) N
(  */) N
(  ) p
(void) k
( setMaxIterations\() p
(unsigned) k
( ) p
(int) k
(\);) p n
(  ) S
(int) k
(  getMaxIterations\() p
(void) k
(\);) p n
() N
( private:) N
(  vector<string> names;               ) S
(// ion names) c n
(  vector<TNT::Vector<) p
(float) k
(> > Nspill; ) p
(// spillover rates) c n
(  vector<TNT::Vector<) p
(float) k
(> > Nspilltil; ) p
(// ghost-count-corrected spillover rate) c n
(s) N
(  ) p
(int) k
( SpillRates::calc2\() p
(const) K
( vector<Ion>& grp, ) p
(int) k
( nedb, ) p n
() S 8 T () S 16 T () S 24 T (TNT::Vector<) S
(float) k
(>& B, ) p n
() S 8 T () S 16 T () S 24 T (TNT::Vector<) S
(float) k
(>& NspillC2,) p n
() S 8 T () S 16 T () S 24 T (TNT::Vector<) S
(float) k
(>& NspilltilC2,) p n
() S 8 T () S 16 T () S 24 T (vector<bool>& badspecies\);) N
(  ) N
(  ) S
(float) k
( negRateCutoff;) p n
() N
(  ) S
(int) k
( maxIterations;) p n
(};) N
(SpillRates.h) (Page 1/2) (Nov 06, 03 16:53) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
(SpillRates.h) (Page 2/2) (Nov 06, 03 16:53) title
border
grestore
(Printed by Jim Raines) rhead
(../include/SpillRates.h) (5/5) (Monday August 09, 2004) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
